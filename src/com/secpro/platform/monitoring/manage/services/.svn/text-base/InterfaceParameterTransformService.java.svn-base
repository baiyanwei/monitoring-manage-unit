package com.ultrapower.project.bomc.he.cmdb.resif.services;

import java.io.IOException;
import java.io.InputStream;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;

import javax.servlet.http.HttpServletRequest;

import org.dom4j.Document;
import org.dom4j.DocumentException;
import org.dom4j.Element;
import org.dom4j.io.SAXReader;
import org.json.JSONException;
import org.json.JSONObject;

import com.ultrapower.project.bomc.he.cmdb.resif.lifecycle.DeviceLifeCycle;
import com.ultrapower.project.bomc.he.cmdb.resif.util.log.PlatformLogger;
import com.ultrapower.project.bomc.he.cmdb.resif.util.service.IService;
import com.ultrapower.project.bomc.he.cmdb.resif.util.service.ServiceInfo;
import com.ultrapower.ultracmdb.nresource.common.ResExtObject;

/**
 * @author baiyanwei 2013-9-2
 * 
 *         用来转化接口参数名称
 */
@ServiceInfo(description = "the interface parameter transform serivce")
public class InterfaceParameterTransformService implements IService {
	private final static PlatformLogger _logger = PlatformLogger.getLogger(InterfaceParameterTransformService.class);
	HashMap<String, HashMap<String, JSONObject>> _referentMap = new HashMap<String, HashMap<String, JSONObject>>();
	HashMap<String, String> _actionQueryMap = new HashMap<String, String>();
	HashMap<String, String> _locationMap = new HashMap<String, String>();
	HashMap<String, String> _cityMap = new HashMap<String, String>();
	HashMap<String, String> _equipmentTypeMap = new HashMap<String, String>();
	HashMap<String, String> _devBusinessMap = new HashMap<String, String>();

	public void start() throws Exception {
		initParameterReferent();
	}

	public void stop() throws Exception {
	}

	/**
	 * 读取配置文件actionResource.xml
	 */
	@SuppressWarnings("unchecked")
	private void initParameterReferent() {
		InputStream inputXML = null;
		try {
			SAXReader saxReader = new SAXReader();
			inputXML = this.getClass().getClassLoader().getResourceAsStream("actionResource.xml");
			Document document = saxReader.read(inputXML);
			List<Object> actionTypeList = document.getRootElement().elements("actionType");
			Element commonParameter = document.getRootElement().element("commonParameter");
			if (actionTypeList == null || actionTypeList.isEmpty() || commonParameter == null) {
				return;
			}
			HashMap<String, JSONObject> commonDefMap = getParameterDefineMap(commonParameter.elements("parameter"));
			for (int i = 0; i < actionTypeList.size(); i++) {
				Element parameterObj = (Element) actionTypeList.get(i);
				if (parameterObj == null) {
					continue;
				}
				_actionQueryMap.put(parameterObj.attributeValue("id"), parameterObj.attributeValue("queryPpName"));
				HashMap<String, JSONObject> defineMap = getParameterDefineMap(parameterObj.elements("parameter"));
				defineMap.putAll(commonDefMap);
				// <actionType id="A001">
				_referentMap.put(parameterObj.attributeValue("id"), defineMap);
			}
			//
			Element referentCity = document.getRootElement().element("cityReferent");
			this._cityMap.putAll(getReferentMap(referentCity.elements("refernt")));
			Element referentLocation = document.getRootElement().element("locationReferent");
			this._locationMap.putAll(getReferentMap(referentLocation.elements("refernt")));
			Element referentEQType = document.getRootElement().element("equipmentTypeReferent");
			this._equipmentTypeMap.putAll(getReferentMap(referentEQType.elements("refernt")));
			Element devBusinessMapType = document.getRootElement().element("devBusinessReferent");
			this._devBusinessMap.putAll(getReferentMap(devBusinessMapType.elements("refernt")));
		} catch (DocumentException e) {
			_logger.exception(e);
		} finally {
			if (inputXML != null) {
				try {
					inputXML.close();
				} catch (IOException e) {
				}
			}
		}
	}

	/**
	 * 分析封装XLS中定义的动作字段
	 * 
	 * @param parameterList
	 * @return
	 */
	private HashMap<String, JSONObject> getParameterDefineMap(List<Object> parameterList) {
		HashMap<String, JSONObject> defineMap = new HashMap<String, JSONObject>();
		for (int i = 0; i < parameterList.size(); i++) {
			Element parameterObj = (Element) parameterList.get(i);
			if (parameterObj == null) {
				continue;
			}
			JSONObject definedObj = new JSONObject();
			// <parameter key="itAssetLabelNo" cPpName="itTempAssetNo"
			// required="true" />
			try {
				definedObj.put("key", parameterObj.attributeValue("key"));
				definedObj.put("cPpName", parameterObj.attributeValue("cPpName"));
				definedObj.put("required", parameterObj.attributeValue("required"));
				defineMap.put(parameterObj.attributeValue("key"), definedObj);
			} catch (JSONException e) {
				e.printStackTrace();
			}

		}
		return defineMap;
	}

	/**
	 * 分析封装XLS中定义的动作字段
	 * 
	 * @param parameterList
	 * @return
	 */
	private HashMap<String, String> getReferentMap(List<Object> referntList) {
		HashMap<String, String> defineMap = new HashMap<String, String>();
		for (int i = 0; i < referntList.size(); i++) {
			Element parameterObj = (Element) referntList.get(i);
			if (parameterObj == null) {
				continue;
			}
			// <refernt key="小型机" value="01" />
			defineMap.put(parameterObj.attributeValue("key"), parameterObj.attributeValue("value"));
		}
		return defineMap;
	}

	/**
	 * 查询设备是否具备执行请求动作的条件，主要检查状态是否正确
	 * 
	 * @param targetObject
	 * @param actionType
	 * @return
	 */
	public boolean checkNextLifeCycleReadyByResExtObject(ResExtObject targetObject, String actionType) {
		if (targetObject == null || actionType == null || actionType.length() == 0) {
			return false;
		}
		long currentStatus = ((Long) targetObject.getAttributeValue("phase")).longValue();
		// 上架动作
		if (actionType.equals("A001")) {
			if (currentStatus == DeviceLifeCycle.IN_STOCK) {
				return true;
			}
			return false;
		}
		// 加电动作
		if (actionType.equals("A002")) {
			if (currentStatus == DeviceLifeCycle.ON_FRAME) {
				return true;
			}
			return false;
		}
		// 上线动作
		if (actionType.equals("A003")) {
			if (currentStatus == DeviceLifeCycle.UNUSED) {
				return true;
			}
			return false;
		}
		// 下线动作
		if (actionType.equals("A004")) {
			if (currentStatus == DeviceLifeCycle.USED) {
				return true;
			}
			return false;
		}
		// 下电动作
		if (actionType.equals("A005")) {
			if (currentStatus == DeviceLifeCycle.UNUSED) {
				return true;
			}
			return false;
		}
		// 下架动作
		if (actionType.equals("A006")) {
			if (currentStatus == DeviceLifeCycle.ON_FRAME) {
				return true;
			}
			return false;
		}
		// 转资动作
		if (actionType.equals("A007")) {
			return true;
		}
		// 搬迁动作
		if (actionType.equals("A008")) {
			return true;
		}
		return true;
	}

	/**
	 * 检查动作参数是否完整
	 * 
	 * @param request
	 * @return
	 */
	public String checkActionTypeParameter(HttpServletRequest request) {
		String actionType = request.getParameter("actionType");
		if (actionType == null || actionType.length() == 0) {
			_logger.warn("noActionType");
			return "noActionType";
		}
		HashMap<String, JSONObject> actionParameterMap = _referentMap.get(actionType);
		if (actionParameterMap == null || actionParameterMap.isEmpty()) {
			_logger.warn("noActionReferent", actionType);
			return "noActionReferent";
		}
		//StringBuffer parameterBuffer = new StringBuffer();
		for (Iterator<String> iter = actionParameterMap.keySet().iterator(); iter.hasNext();) {
			String key = iter.next();
			String value = request.getParameter(key);
			String checkRslt = checkParameterValue(value, actionParameterMap.get(key));
			if (checkRslt != null) {
				return checkRslt;
				//parameterBuffer.append(checkRslt);
			}
		}
		return null;
	}

	/**
	 * 按封装REQUEST中的参数
	 * 
	 * @param request
	 * @return
	 */
	public HashMap<String, String> transformActionParameterByRequest(HttpServletRequest request) {
		String actionType = request.getParameter("actionType");
		if (actionType == null || actionType.length() == 0) {
			_logger.warn("noActionType");
			return null;
		}
		HashMap<String, JSONObject> actionParameterMap = _referentMap.get(actionType);
		if (actionParameterMap == null || actionParameterMap.isEmpty()) {
			_logger.warn("noActionReferent", actionType);
			return null;
		}
		HashMap<String, String> reParameterMap = new HashMap<String, String>();
		for (Iterator<String> iter = actionParameterMap.keySet().iterator(); iter.hasNext();) {
			String key = iter.next();
			String value = request.getParameter(key);
			if (value == null) {
				reParameterMap.put(key, null);
			} else {
				try {
					reParameterMap.put(key, new String(value.getBytes("iso8859-1"), "UTF-8"));
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		}
		_logger.debug("transformActionParameterCheck",actionType,reParameterMap.toString());
		return reParameterMap;
	}

	/**
	 * 取得接口定义参数规则
	 * 
	 * @param actionType
	 * @return
	 */
	public HashMap<String, JSONObject> getActionParameterDefineByRequest(HttpServletRequest request) {
		if (request == null) {
			_logger.warn("noActionType");
			return null;
		}
		String actionType = request.getParameter("actionType");
		if (actionType == null || actionType.length() == 0) {
			_logger.warn("noActionType");
			return null;
		}
		return _referentMap.get(actionType);
	}

	/**
	 * 按定制规则检查参数值是否符合 返回NULL为正常
	 * 
	 * @param value
	 * @param referentObj
	 * @return
	 */
	private String checkParameterValue(String value, JSONObject referentObj) {
		try {
			// 非空，必填校验
			if (referentObj.get("required") != null && referentObj.getString("required").equalsIgnoreCase("true")) {
				if (value == null || value.trim().length() == 0) {
					return referentObj.getString("key") + " required fail,";
				}
			}
		} catch (JSONException e) {
		}
		return null;
	}

	/**
	 * 根据REQUEST 与动作标识取得查询资源的条件与值
	 * 
	 * @param request
	 * @param actionType
	 * @return
	 */
	public String[] getQueryPpNameAndValue(HttpServletRequest request, String actionType) {
		if (request == null || actionType == null) {
			return null;
		}
		String queryStr = _actionQueryMap.get(actionType);
		if (queryStr == null || queryStr.length() == 0) {
			return null;
		}
		// 如果有多个KEY，以第一个不为空的字段为返回值
		if (queryStr.indexOf("###") == -1) {
			try {
				String cmdbPpName = _referentMap.get(actionType).get(queryStr).getString("cPpName");
				return new String[] { cmdbPpName, request.getParameter(queryStr) };
			} catch (JSONException e) {
				_logger.exception(e);
			}

		} else {
			String[] queryArray = queryStr.split("###");
			for (int i = 0; i < queryArray.length; i++) {
				if (request.getParameter(queryArray[i]) != null && request.getParameter(queryArray[i]).trim().length() != 0) {
					try {
						String cmdbPpName = _referentMap.get(actionType).get(queryArray[i]).getString("cPpName");
						return new String[] { cmdbPpName, request.getParameter(queryArray[i]) };
					} catch (JSONException e) {
						_logger.exception(e);
						return null;
					}
				}
			}
		}
		return null;
	}

	/**
	 * 取得地点对应的字典值
	 * 
	 * @param locationKey
	 * @return
	 */
	public String getLocationValue(String locationKey) {
		return this._locationMap.get(locationKey);
	}

	/**
	 * 取得城市对应的字典值
	 * 
	 * @param cityKey
	 * @return
	 */
	public String getCityValue(String cityKey) {
		return this._cityMap.get(cityKey);
	}

	/**
	 * 取得设备对应的字典值
	 * 
	 * @param EQTypeKey
	 * @return
	 */
	public String getEquipmentTypeValue(String EQTypeKey) {
		return this._equipmentTypeMap.get(EQTypeKey);
	}

	/**
	 * 取得业务类别对应的字典值
	 * 
	 * @param EQTypeKey
	 * @return
	 */
	public String getDevBusinessValue(String devBusinessValue) {
		return this._devBusinessMap.get(devBusinessValue);
	}
}
