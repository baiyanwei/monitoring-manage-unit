package com.ultrapower.project.bomc.he.cmdb.resif.services;

import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import com.ultrapower.project.bomc.he.cmdb.resif.util.ApplicationConfiguration;
import com.ultrapower.project.bomc.he.cmdb.resif.util.log.PlatformLogger;
import com.ultrapower.project.bomc.he.cmdb.resif.util.service.IService;
import com.ultrapower.project.bomc.he.cmdb.resif.util.service.ServiceHelper;
import com.ultrapower.project.bomc.he.cmdb.resif.util.service.ServiceInfo;
import com.ultrapower.ultracmdb.cmdb.api.UniResAPI;
import com.ultrapower.ultracmdb.cmdb.model.ResDefConstraint;
import com.ultrapower.ultracmdb.cmdb.model.ResObjectCollection;
import com.ultrapower.ultracmdb.nresource.common.ResExtObject;
import com.ultrapower.ultracmdb.nresource.value.ResDefClass;
import com.ultrapower.ultracmdb.nresource.value.ResDefProperty;

/**
 * @author baiyanwei 负责支持名种数据查询
 */
@ServiceInfo(description = "lookup resource from cmdb")
public class ModelService implements IService {
	private static PlatformLogger _logger = PlatformLogger.getLogger(ModelService.class);
	// 类定义
	final public static String RES_DEL_CLASS_TITLE = "ResDefClass";
	// 属性定义
	final public static String ResDefProperty_TITLE = "ResDefProperty";
	// 约束定义
	final public static String ResDefConstraint_TITLE = "ResDefConstraint";
	// 关系扩展类定义
	final public static String ResDefExtRelation_TITLE = "ResDefExtRelation";
	// 关系使用环境定义
	final public static String ResDefExtRelationEnv_TITLE = "ResDefExtRelationEnv";
	// 属性定义MAP
	private static HashMap<String, Object> RES_DEF_PP_MAP = new HashMap<String, Object>();
	// 类定义MAP
	private static HashMap<String, ResDefClass> RES_DEF_CLASS_MAP = new HashMap<String, ResDefClass>();
	// 约束定义MAP
	private static HashMap ResDefConstraint_MAP = new HashMap();
	// 关系定义MAP 关系扩展类模型
	private static HashMap RES_DEF_RELATION_ResDefExtRelation_MAP = new HashMap();
	// 关系定义MAP 关系使用环境
	private static HashMap RES_DEF_RELATION_ResDefExtRelationEnv_MAP = new HashMap();
	// CMDB资源类型MAP
	private static HashMap<String, ResExtObject> ResDimClassMap = new HashMap<String, ResExtObject>();

	/**
	 * 取得类定义缓存MAP
	 */
	private void initDefMap() {
		try {
			long startLong = System.currentTimeMillis();
			//
			UniResAPIService urapiService = ServiceHelper.findService(UniResAPIService.class);
			UniResAPI uniResAPI = urapiService.getUniResAPI();
			// 取得所有元数据类标题
			List classNameList = uniResAPI.getMetaDataList(ApplicationConfiguration.APPLICATION_NAME);
			// 构建类定义缓存
			for (int i = 0; i < classNameList.size(); i++) {
				if (classNameList == null) {
					continue;
				}
				// 取得对所有具体元数据内容
				Map defMap = uniResAPI.getMetaData(classNameList.get(i).toString(), ApplicationConfiguration.APPLICATION_NAME);
				ResDefClass resDefClass = (ResDefClass) ((List) defMap.get(RES_DEL_CLASS_TITLE)).get(0);
				// 装入缓存中
				if (resDefClass.isReLationClass()) {
					// 缓存关系元数据
					RES_DEF_CLASS_MAP.put(resDefClass.getClassTitle(), resDefClass);
					if (defMap.get(ResDefExtRelation_TITLE) != null) {
						RES_DEF_RELATION_ResDefExtRelation_MAP.put(resDefClass.getClassTitle(), defMap.get(ResDefExtRelation_TITLE));
					}
					RES_DEF_PP_MAP.put(resDefClass.getClassTitle(), defMap.get(ResDefProperty_TITLE));
					if (resDefClass.getClassFullName().startsWith("RelRelation")) {
						RES_DEF_RELATION_ResDefExtRelationEnv_MAP.put(resDefClass.getClassTitle(), defMap.get(ResDefExtRelationEnv_TITLE));
					}
					List resDefConsList = (List) (defMap.get(ResDefConstraint_TITLE));
					HashMap resDefConsMap = new HashMap();
					if (resDefConsList != null) {
						for (int k = 0; k < resDefConsList.size(); k++) {
							try {
								ResDefConstraint loopResDefConstraint = (ResDefConstraint) (resDefConsList.get(k));
								if (loopResDefConstraint == null) {
									continue;
								}
								// 组织约束，方便页面按类标题和属性标题取定义
								resDefConsMap.put(loopResDefConstraint.getPropertyTitle(), loopResDefConstraint);
							} catch (Exception e1) {
								_logger.error(resDefConsList.get(k) + "", e1);
							}
						}
					}
					ResDefConstraint_MAP.put(resDefClass.getClassTitle(), resDefConsMap);
				} else {
					// 缓存类定义元数据
					RES_DEF_CLASS_MAP.put(resDefClass.getClassTitle(), resDefClass);
					RES_DEF_PP_MAP.put(resDefClass.getClassTitle(), defMap.get(ResDefProperty_TITLE));
					List resDefConsList = (List) (defMap.get(ResDefConstraint_TITLE));
					HashMap resDefConsMap = new HashMap();
					if (resDefConsList != null) {
						for (int k = 0; k < resDefConsList.size(); k++) {
							try {
								ResDefConstraint loopResDefConstraint = (ResDefConstraint) (resDefConsList.get(k));
								if (loopResDefConstraint == null) {
									continue;
								}
								// 组织约束，方便页面按类标题和属性标题取定义
								resDefConsMap.put(loopResDefConstraint.getPropertyTitle(), loopResDefConstraint);
							} catch (Exception e1) {
								_logger.error(resDefConsList.get(k) + "", e1);
							}
						}
					}
					ResDefConstraint_MAP.put(resDefClass.getClassTitle(), resDefConsMap);
				}

			}
			_logger.info("读取类与关系元数据缓存完毕,消耗时间[" + (System.currentTimeMillis() - startLong) + "mm].");
		} catch (Exception e) {
			_logger.error("", e);
		}
	}

	/**
	 * 取得资源类型定义缓存
	 */
	private void initCategoryMap() {
		long startLong = System.currentTimeMillis();
		ResObjectCollection roc = null;
		try {
			UniResAPIService urapiService = ServiceHelper.findService(UniResAPIService.class);
			UniResAPI uniResAPI = urapiService.getUniResAPI();
			roc = uniResAPI.getResExtObjects(CMDBClassTitleDef.ResCategory_CT, null, null, 0, 1, Integer.MAX_VALUE, ApplicationConfiguration.APPLICATION_NAME, "root");
			_logger.info("读取" + CMDBClassTitleDef.ResCategory_CT + "完毕,消耗时间[" + (System.currentTimeMillis() - startLong) + "mm].");
		} catch (Exception e) {
			_logger.error("", e);
			return;
		}
		if (roc != null) {
			List resObjs = roc.getObjs();
			if (resObjs == null || resObjs.isEmpty()) {
				_logger.error("取得类标题" + CMDBClassTitleDef.ResCategory_CT + "数据为空！");
				// 未实现
			} else {
				for (int i = 0; i < resObjs.size(); i++) {
					Object obj = resObjs.get(i);
					if (obj == null || (obj instanceof ResExtObject) == false) {
						continue;
					}
					String key = ((ResExtObject) obj).getId() + "";
					ResDimClassMap.put(key, (ResExtObject) obj);
				}
			}
		}

	}

	/**
	 * 重新加载资源类型定义 added by zxl for 资源类型树的刷新
	 */
	public synchronized String reloadDimPool() {
		try {
			ResDimClassMap.clear();
			initCategoryMap();
			return null;
		} catch (Exception e) {
			_logger.error("", e);
			return e.getMessage();
		}
	}

	/**
	 * 重新加载类定义
	 */
	public synchronized void reloadPool() throws Exception {
		clearPool();
		start();
	}

	/**
	 * 清除缓存
	 */
	private synchronized void clearPool() {
		_logger.info("清空元数缓存！");
		RES_DEF_PP_MAP.clear();
		RES_DEF_CLASS_MAP.clear();
		ResDefConstraint_MAP.clear();
		RES_DEF_RELATION_ResDefExtRelation_MAP.clear();
		RES_DEF_RELATION_ResDefExtRelationEnv_MAP.clear();
		ResDimClassMap.clear();
	}

	/**
	 * @param className
	 * @return Object 根据类名取得属性定义
	 */
	public Object getListResDefPropertyByClassName(String className) {
		return RES_DEF_PP_MAP.get(className);
	}

	/**
	 * @param classTitle
	 * @return HashMap 取得对应类标题的属性集合
	 */
	public Map<String, ResDefProperty> getMapResDefPropertyByClassTitle(String classTitle) {
		if (classTitle == null || classTitle.equals("")) {
			return new HashMap<String, ResDefProperty>();
		}
		List ppCacheList = (List) getListResDefPropertyByClassName(classTitle);
		HashMap<String, ResDefProperty> ppCacheMap = new HashMap<String, ResDefProperty>();
		if (ppCacheList != null) {
			for (int n = 0; n < ppCacheList.size(); n++) {
				ResDefProperty tmp_rdp = (ResDefProperty) ppCacheList.get(n);
				if (tmp_rdp == null)
					continue;
				ppCacheMap.put(tmp_rdp.getPropertyTitle(), tmp_rdp);
			}
		}
		return ppCacheMap;
	}

	/**
	 * @param className
	 * @return Object 根据类名取得类定义
	 */
	public ResDefClass getResDefClassByClassName(String className) {
		return RES_DEF_CLASS_MAP.get(className);
	}

	/**
	 * @return HashMap 取得所有类定义集合
	 */
	public HashMap getResDefClass() {
		return RES_DEF_CLASS_MAP;
	}

	/**
	 * @return HashMap 取得所有属性定义集合
	 */
	public HashMap getResDefPP() {
		return RES_DEF_PP_MAP;
	}

	/**
	 * @return HashMap 取得类对照转换集合
	 */
	public HashMap getResDimClassMap() {
		return ResDimClassMap;
	}

	/**
	 * @return the rES_DEF_RELATION_ResDefExtRelation_MAP
	 */
	public HashMap getRES_DEF_RELATION_ResDefExtRelation_MAP() {
		return RES_DEF_RELATION_ResDefExtRelation_MAP;
	}

	/**
	 * @param resDefExtRelation_MAP
	 *            the rES_DEF_RELATION_ResDefExtRelation_MAP to set
	 */
	public void setRES_DEF_RELATION_ResDefExtRelation_MAP(HashMap resDefExtRelation_MAP) {
		RES_DEF_RELATION_ResDefExtRelation_MAP = resDefExtRelation_MAP;
	}

	/**
	 * @return the rES_DEF_RELATION_ResDefExtRelationEnv_MAP
	 */
	public HashMap getRES_DEF_RELATION_ResDefExtRelationEnv_MAP() {
		return RES_DEF_RELATION_ResDefExtRelationEnv_MAP;
	}

	/**
	 * @return the resDefConstraint_MAP
	 */
	public HashMap getResDefConstraint_MAP() {
		return ResDefConstraint_MAP;
	}

	/**
	 * @param className
	 *            类标题
	 * @param ppName
	 *            属性标题
	 * @return ResDefConstraint 属性上的约束 根据类名取得属性约束
	 */
	public ResDefConstraint getResDefConstraintByProperty(String className, String ppName) {
		if (ResDefConstraint_MAP.containsKey(className)) {
			HashMap tmpResDefCons = (HashMap) (ResDefConstraint_MAP.get(className));
			// System.out.println("tmpResDefCons.containsKey(ppName) "+tmpResDefCons.keySet()
			// + " ppName "+ ppName);
			if (tmpResDefCons.containsKey(ppName)) {
				return (ResDefConstraint) (tmpResDefCons.get(ppName));
			}
		}
		return null;
	}

	/**
	 * 根据类名和属性名称获取属性定义
	 * 
	 * @param className
	 * @param propertyName
	 * @return
	 */
	public ResDefProperty getResDefPropertyByPopertyTitle(String className, String propertyName) {
		if (className == null || className.trim().length() == 0 || propertyName == null || propertyName.length() == 0)
			return null;

		// 从缓存中取类的所有属性定义
		List<ResDefProperty> propertyList = (List<ResDefProperty>) getListResDefPropertyByClassName(className);
		if (propertyList == null || propertyList.size() == 0)
			return null;

		for (ResDefProperty rdp : propertyList) {
			if (rdp.getPropertyTitle().equalsIgnoreCase(propertyName))
				return rdp;
		}

		return null;
	}

	public void start() throws Exception {
		initDefMap();
		initCategoryMap();
	}

	public void stop() throws Exception {
		// TODO Auto-generated method stub

	}

	public void test() {
		System.out.println("ResDimClassMap:" + ResDimClassMap);
	}

	/**
	 * 根据资源类别取得资源类标
	 * 
	 * @param categoryName
	 * @return
	 */
	public String getClassTitleByCategory(String categoryName) {
		if (categoryName == null || categoryName.length() == 0) {
			return "ResObject";
		}
		for (Iterator<String> keyIter = this.ResDimClassMap.keySet().iterator(); keyIter.hasNext();) {
			ResExtObject categoryObject = this.ResDimClassMap.get(keyIter.next());
			if (categoryName.equals(categoryObject.getName())) {
				Object citClass = categoryObject.getAttributeValue("citClass");
				return citClass == null ? "ResObject" : citClass.toString();
			}
		}
		return "ResObject";
	}
	/**
	 * 根据资源类别名称到的ID
	 * @param categoryName
	 * @return
	 */
	public String getResIDByCategory(String categoryName) {
		if (categoryName == null || categoryName.length() == 0) {
			return "ResObject";
		}
		for (Iterator<String> keyIter = this.ResDimClassMap.keySet().iterator(); keyIter.hasNext();) {
			String key=keyIter.next();
			ResExtObject categoryObject = this.ResDimClassMap.get(key);
			if (categoryName.equals(categoryObject.getName())) {
				return key;
			}
		}
		return null;
	}
	class CMDBClassTitleDef {
		final public static String ResCategory_CT = "ResCategory";
	}
}
