package com.ultrapower.project.bomc.he.cmdb.resif.services;

import java.rmi.NoSuchObjectException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import com.ultrapower.project.bomc.he.cmdb.resif.util.ApplicationConfiguration;
import com.ultrapower.project.bomc.he.cmdb.resif.util.log.PlatformLogger;
import com.ultrapower.project.bomc.he.cmdb.resif.util.service.IService;
import com.ultrapower.project.bomc.he.cmdb.resif.util.service.ServiceHelper;
import com.ultrapower.project.bomc.he.cmdb.resif.util.service.ServiceInfo;
import com.ultrapower.ultracmdb.cmdb.api.UniResAPI;
import com.ultrapower.ultracmdb.cmdb.client.UniResTools;
import com.ultrapower.ultracmdb.cmdb.model.ResObjectCollection;
import com.ultrapower.ultracmdb.cmdb.model.UniResConstants;
import com.ultrapower.ultracmdb.cmdb.reconciliation.bean.Reconciliation;
import com.ultrapower.ultracmdb.cmdb.reconciliation.bean.ReconciliationObject;
import com.ultrapower.ultracmdb.cmdb.reconciliation.util.ReconciliationConstants;
import com.ultrapower.ultracmdb.nresource.common.ResExtObject;
import com.ultrapower.ultracmdb.nresource.value.ResDefClass;
import com.ultrapower.ultracmdb.nresource.value.ResDefProperty;

/**
 * @author baiyanwei 负责支持名种数据查询
 */
@ServiceInfo(description = "lookup resource from cmdb")
public class ResourceService implements IService {
	private static PlatformLogger _logger = PlatformLogger.getLogger(ResourceService.class);

	public void start() throws Exception {
	}

	public void stop() throws Exception {
	}

	/**
	 * 根据类标题取得资源对象
	 * 
	 * @param classTitle
	 * @param pageSize
	 * @param pageNo
	 * @return
	 */
	@SuppressWarnings("unchecked")
	public List<ResExtObject> getResObjectsByClassTitle(String classTitle, int pageSize, int pageNo) {
		if (classTitle == null || classTitle.length() == 0 || pageSize <= 0 || pageNo <= 0) {
			return null;
		}
		//
		UniResAPIService urapiService = ServiceHelper.findService(UniResAPIService.class);
		UniResAPI uniResAPI = urapiService.getUniResAPI();
		if (uniResAPI == null) {
			return null;
		}
		ArrayList<ResExtObject> dataObjectList = new ArrayList<ResExtObject>();
		try {
			ResObjectCollection dataCollection = uniResAPI.getResExtObjects(classTitle, null, null, 0, pageNo, pageSize, ApplicationConfiguration.APPLICATION_NAME,
					ApplicationConfiguration.SYNCHRONIZED_ACCOUNT);
			if (dataCollection != null) {
				dataObjectList.addAll(dataCollection.getObjs());
			}
		} catch (Exception e) {
			_logger.exception(e);
		}
		return dataObjectList;
	}

	/**
	 * 按属性值查询对应的资源对象
	 * 
	 * @param classTitle
	 * @param propertyName
	 * @param propertyValue
	 * @param pageSize
	 * @param pageNo
	 * @return
	 */
	@SuppressWarnings("unchecked")
	public List<ResExtObject> getResObjectsByCondition(String classTitle, String propertyName, String propertyValue, int condition, int pageSize, int pageNo) {
		if (classTitle == null || classTitle.length() == 0 || propertyName == null || propertyName.length() == 0 || pageSize <= 0 || pageNo <= 0) {
			return null;
		}
		//
		UniResAPIService urapiService = ServiceHelper.findService(UniResAPIService.class);
		UniResAPI uniResAPI = urapiService.getUniResAPI();
		if (uniResAPI == null) {
			return null;
		}
		ArrayList<ResExtObject> dataObjectList = new ArrayList<ResExtObject>();
		try {
			ResObjectCollection dataCollection = uniResAPI.getResExtObjects(classTitle, propertyName, propertyValue, condition, pageNo, pageSize,
					ApplicationConfiguration.APPLICATION_NAME, ApplicationConfiguration.SYNCHRONIZED_ACCOUNT);
			if (dataCollection != null) {
				dataObjectList.addAll(dataCollection.getObjs());
			}
		} catch (Exception e) {
			_logger.exception(e);
		}
		return dataObjectList;
	}

	/**
	 * 获取资源对象，根据标签号
	 * 
	 * @param itAssetLabelNoStr
	 * @return
	 */
	@SuppressWarnings("unchecked")
	public List<ResExtObject> getResObjectsByItAssetLabelNo(String itAssetLabelNoStr) {
		if (itAssetLabelNoStr == null || itAssetLabelNoStr.length() == 0) {
			return null;
		}
		//
		UniResAPIService urapiService = ServiceHelper.findService(UniResAPIService.class);
		UniResAPI uniResAPI = urapiService.getUniResAPI();
		if (uniResAPI == null) {
			return null;
		}
		ArrayList<ResExtObject> dataObjectList = new ArrayList<ResExtObject>();
		try {
			ResObjectCollection dataCollection = uniResAPI.getResExtObjects("ResObject", "itAssetLabelNo", itAssetLabelNoStr, UniResConstants.WHOLEWORD_CASEINSENSITIVE, 1, 1,
					ApplicationConfiguration.APPLICATION_NAME, ApplicationConfiguration.SYNCHRONIZED_ACCOUNT);
			if (dataCollection != null) {
				dataObjectList.addAll(dataCollection.getObjs());
			}
		} catch (Exception e) {
			_logger.exception(e);
		}
		return dataObjectList;
	}

	/**
	 * @param sCode
	 * @return
	 */
	public ResExtObject getResObjectsBySCode(String sCode) {
		if (sCode == null || sCode.length() == 0) {
			return null;
		}
		//
		UniResAPIService urapiService = ServiceHelper.findService(UniResAPIService.class);
		UniResAPI uniResAPI = urapiService.getUniResAPI();
		if (uniResAPI == null) {
			return null;
		}
		ArrayList<ResExtObject> dataObjectList = new ArrayList<ResExtObject>();
		try {
			return uniResAPI.getResExtObjectBySCode(sCode, ApplicationConfiguration.APPLICATION_NAME, ApplicationConfiguration.SYNCHRONIZED_ACCOUNT);
		} catch (Exception e) {
			_logger.exception(e);
		}
		return null;
	}

	/**
	 * 根据资源对象的ID取得资源
	 * 
	 * @param className
	 * @param resID
	 * @return
	 */
	public ResExtObject getResObjectsByResID(String className, String resID) {
		if (resID == null || resID.length() == 0) {
			return null;
		}
		String classTitle = className;
		if (classTitle == null || classTitle.length() == 0) {
			classTitle = "ResObject";
		}
		//
		UniResAPIService urapiService = ServiceHelper.findService(UniResAPIService.class);
		UniResAPI uniResAPI = urapiService.getUniResAPI();
		if (uniResAPI == null) {
			return null;
		}
		ArrayList<ResExtObject> dataObjectList = new ArrayList<ResExtObject>();
		try {
			ResObjectCollection dataCollection = uniResAPI.getResExtObjects(classTitle, "resID", resID, UniResConstants.EQUAL, 1, 1, ApplicationConfiguration.APPLICATION_NAME,
					ApplicationConfiguration.SYNCHRONIZED_ACCOUNT);
			if (dataCollection != null) {
				dataObjectList.addAll(dataCollection.getObjs());
			}
		} catch (Exception e) {
			_logger.exception(e);
		}
		return dataObjectList.isEmpty() == false ? dataObjectList.get(0) : null;
	}

	/**
	 * 取得属性对应的显示属性
	 * 
	 * @param classTitle
	 * @param propertyTitle
	 * @param value
	 * @return
	 */
	public String propertyValueOfString(String classTitle, String propertyTitle, Object value) {
		if (value == null) {
			return "";
		}
		if (classTitle == null || classTitle.length() == 0 || propertyTitle == null || propertyTitle.length() == 0) {
			return "";
		}
		ModelService modelService = ServiceHelper.findService(ModelService.class);
		ResDefProperty resDefProperty = modelService.getResDefPropertyByPopertyTitle(classTitle, propertyTitle);
		if (resDefProperty == null) {
			return value.toString();
		}
		if (resDefProperty.getPropertyType() == 9) {
			// 9为列表型属性,dimName为关联属性关联的类标题
			ResExtObject dimObject = getResExtObjectByResId(resDefProperty.getDimName(), value.toString());
			if (dimObject != null) {
				return dimObject.toString();
			} else {
				return "";
			}
		}
		return value.toString();
	}

	/**
	 * 根据资源ID取得资源对象
	 * 
	 * @param classTitle
	 * @param resId
	 * @return
	 */
	public ResExtObject getResExtObjectByResId(String classTitle, String resID) {
		if (resID == null || resID.length() == 0) {
			return null;
		}
		if (classTitle == null || classTitle.length() == 0) {
			return null;
		}
		UniResAPIService urapiService = ServiceHelper.findService(UniResAPIService.class);
		UniResAPI uniResAPI = urapiService.getUniResAPI();
		if (uniResAPI == null) {
			return null;
		}
		try {
			// 查找对应resID的资源对象
			ResObjectCollection resultCollection = uniResAPI.getResExtObjects(classTitle, "resID", resID, UniResConstants.EQUAL, 1, 1, ApplicationConfiguration.APPLICATION_NAME,
					ApplicationConfiguration.SYNCHRONIZED_ACCOUNT);
			if (resultCollection != null && resultCollection.getObjs() != null && resultCollection.getObjs().isEmpty() == false) {
				return (ResExtObject) (resultCollection.getObjs().get(0));
			} else {
				return null;
			}
		} catch (NoSuchObjectException nse) {
			_logger.exception(nse);
		} catch (Exception e) {
			_logger.exception(e);
		}
		return null;
	}

	public ResExtObject getDevBussinessObject(String fullName) {
		if (fullName == null || fullName.length() == 0) {
			return null;
		}
		UniResAPIService urapiService = ServiceHelper.findService(UniResAPIService.class);
		UniResAPI uniResAPI = urapiService.getUniResAPI();
		if (uniResAPI == null) {
			return null;
		}
		try {
			// 查找对应resID的资源对象
			ResObjectCollection resultCollection = uniResAPI.getResExtObjects("ResBusiness", "fullName", fullName, UniResConstants.WHOLEWORD_CASEINSENSITIVE, 1, 1,
					ApplicationConfiguration.APPLICATION_NAME, ApplicationConfiguration.SYNCHRONIZED_ACCOUNT);
			if (resultCollection != null && resultCollection.getObjs() != null && resultCollection.getObjs().isEmpty() == false) {
				return (ResExtObject) (resultCollection.getObjs().get(0));
			} else {
				return null;
			}
		} catch (NoSuchObjectException nse) {
			_logger.exception(nse);
		} catch (Exception e) {
			_logger.exception(e);
		}
		return null;
	}

	/**
	 * 通步数据到CMDB中
	 * 
	 * @param classTitle
	 * @param categoryID
	 * @param dataList
	 */
	public boolean synchronizedResExtObjectBatch(String classTitle, List<HashMap<String, Object>> dataList) {
		ModelService modelService = ServiceHelper.findService(ModelService.class);
		ResDefClass redDefClass = (ResDefClass) (modelService.getResDefClassByClassName(classTitle));
		List<Reconciliation> targetList = new ArrayList<Reconciliation>();
		UniResAPIService urapiService = ServiceHelper.findService(UniResAPIService.class);
		for (int i = 0; i < dataList.size(); i++) {
			HashMap<String, Object> attribMap = dataList.get(i);
			// System.out.println(">>>>>>" + dataList.get(i));
			ResExtObject newObject = UniResTools.packagingResExtObject(redDefClass, dataList.get(i));
			newObject.setName(attribMap.get("resName").toString());
			newObject.setClassDefineInf(redDefClass);
			// newObject.setMoName(attribMap.get("resName").toString());
			// newObject.setSearchCode(attribMap.get("resName").toString());
			ReconciliationObject rcObject = covertToReconciliationObject(newObject);
			List<Object> objjList = new ArrayList<Object>();
			objjList.add(newObject);
			//
			if (rcObject.checkObjectFormat(urapiService.getUniResAPI(), ApplicationConfiguration.APPLICATION_NAME) == false) {
				continue;
			}
			if (rcObject != null) {
				targetList.add(rcObject);
			}
		}
		try {
			List<Reconciliation> resultList = urapiService.getReconciliationAPI().conciliate(targetList, ApplicationConfiguration.APPLICATION_NAME,
					ApplicationConfiguration.SYNCHRONIZED_ACCOUNT, System.currentTimeMillis());
			System.out.println(">>>" + resultList);
		} catch (Exception e) {
			_logger.exception(e);
			return false;
		}
		return true;
	}

	/**
	 * @param classTitle
	 * @param updateMap
	 * @return
	 */
	public boolean synchronizedResExtObject(String classTitle, HashMap<String, Object> updateMap) {
		if (updateMap == null || classTitle == null || classTitle.length() == 0) {
			return false;
		}
		List<HashMap<String, Object>> dataList = new ArrayList<HashMap<String, Object>>();
		dataList.add(updateMap);
		return synchronizedResExtObjectBatch(classTitle, dataList);
	}

	//
	public ReconciliationObject covertToReconciliationObject(ResExtObject cmdbObject) {
		if (cmdbObject == null)
			return null;
		// 定义转换成的类
		ReconciliationObject reconciliationObj = new ReconciliationObject();
		String rawID = System.currentTimeMillis() + "";
		// 设置类标题

		ResDefClass rdc = cmdbObject.getClassDefineInf();
		reconciliationObj.setClassTitle(rdc.getClassTitle());
		reconciliationObj.setResObj(cmdbObject);
		reconciliationObj.setChangeToPositiveRel(false);
		reconciliationObj.setRawID(rawID);
		// 对象快速唯一标示属性
		Map<String, List<String>> uniqueMap = new HashMap<String, List<String>>();
		// 对象属性唯一标示
		List<String> attributeUnique = new ArrayList<String>();
		reconciliationObj.setUniqueMap(uniqueMap);

		attributeUnique.add("resName");
		uniqueMap.put(ReconciliationConstants.UNIQUE_ATTRIBUTES, attributeUnique);
		reconciliationObj.getResObj().setAttributeValue("resName", cmdbObject.getName());

		reconciliationObj.setCiName(cmdbObject.getName());
		//
		return reconciliationObj;
	}

	/**
	 * 创建调和属性的对象
	 * 
	 * @param classTitle
	 * @param unique
	 * @param resName
	 * @return
	 */
	public ReconciliationObject buildPropertyReconciliationObjForListType(String classTitle, HashMap<String, Object> parameterMap) {
		if (classTitle == null || classTitle.trim().length() == 0) {
			return null;
		}
		if (parameterMap == null || parameterMap.isEmpty()) {
			return null;
		}

		//
		ModelService modelService = ServiceHelper.findService(ModelService.class);
		ResDefClass resDefClass = modelService.getResDefClassByClassName(classTitle);
		if (resDefClass == null) {
			return null;
		}
		// 列表型
		ReconciliationObject reconciliationObj = new ReconciliationObject();
		//
		ResExtObject resExtObject = new ResExtObject();
		resExtObject.setClassDefineInf(resDefClass);
		reconciliationObj.setClassTitle(resDefClass.getClassTitle());
		reconciliationObj.setRawID(String.valueOf(System.currentTimeMillis()));
		reconciliationObj.setResObj(resExtObject);
		// reconciliationObj.setPositiveRelClassTitle("ResNode");
		reconciliationObj.setChangeToPositiveRel(false);
		//
		HashMap<String, List<String>> searchPropertyMap = new HashMap<String, List<String>>();
		List<String> mappingPropertyList = new ArrayList<String>();
		searchPropertyMap.put(ReconciliationConstants.UNIQUE_ATTRIBUTES, mappingPropertyList);
		reconciliationObj.setUniqueMap(searchPropertyMap);
		// 生成对应条件与属性支持
		for (Iterator<String> keyIter = parameterMap.keySet().iterator(); keyIter.hasNext();) {
			String keyName = keyIter.next();
			Object keyValueObj = parameterMap.get(keyName);
			resExtObject.setAttributeValue(keyName, keyValueObj);
			mappingPropertyList.add(keyName);
		}//
		return reconciliationObj;
	}

	/**
	 * 标签号在小型机与分区服务器中可以存在一对多的关系，所以在这两类取资源对象时，需要判断类别。
	 * @param equipmentType
	 * @param resObjList
	 * @return
	 */
	public ResExtObject checkResHostNode(String equipmentType, List<ResExtObject> resObjList) {
		if (equipmentType == null || equipmentType.length() == 0) {
			return null;
		}
		if (resObjList == null || resObjList.isEmpty()) {
			return null;
		}
		ModelService ms = ServiceHelper.findService(ModelService.class);
		for (int i = 0; i < resObjList.size(); i++) {
			ResExtObject hostObj = resObjList.get(i);
			if (hostObj == null || hostObj.getAttributeValue("resCategory") == null) {
				continue;
			}
			String targetCategory = hostObj.getAttributeValue("resCategory").toString();
			if (ms.getResDimClassMap().containsKey(targetCategory) == false) {
				continue;
			}
			targetCategory = ((ResExtObject) (ms.getResDimClassMap().get(targetCategory))).getName();
			if (targetCategory == null) {
				continue;
			}
			if (equipmentType.equals(targetCategory)) {
				return resObjList.get(i);
			}
		}
		return null;
	}
}
